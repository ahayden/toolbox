name: build  #based on template https://github.com/docker/build-push-action

on:
  schedule:
    - cron: '0 2 * * *' #daily at 0200
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
    pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    container: hadolint/hadolint:latest
    steps:
    - uses: actions/checkout@v2
    - name: Run hadolint
      run: hadolint
        Dockerfile.base

  test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Validate docker-compose.yaml 
      run: docker-compose -f docker-compose.yaml config

  build:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout src
        uses: actions/checkout@2
      -
        name: Read repo metadata
        id: repo
        uses: actions/github-script@3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      -
        name: Versioning logic
        id: prep_versions
        run: |
          DOCKER_IMAGE=ahayden/${{ github.event.repository.name }}
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#ref/tags/}
          elif [[ $GITHUB_REF == ref/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push base image
        id: docker_build_base
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.base
          platforms: linux/amd64,linux/arm64,linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
